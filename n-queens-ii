/*
Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.
*/

/* solution：非对角线条件，斜率绝对值不为1*/

public class Solution {
    private int count;

	public int totalNQueens(int n){
		if(n<=0) return 0;
		count=0;
		int[] visited=new int[n];
		dfs(n,0,visited);
		return count;
	}

	private void dfs(int n, int row, int[] visited){
		if(row==n){
			count++;
			return;
		}

		for(int i=0;i<n;i++){
			if (!isValid(visited,row,i)) continue;
			visited[row]=i;
			dfs(n,row+1,visited);
		}

	}

	private boolean isValid(int[] visited, int row, int col){
	    
		for(int i=0;i<row;i++){
		    if(visited[i]==col) return false;
			if(Math.abs(col-visited[i])==Math.abs(row-i)) return false;
		}
		return true;

	}
}
